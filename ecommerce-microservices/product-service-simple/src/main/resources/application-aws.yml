spring:
  application:
    name: product-service
  
  # PostgreSQL Database Configuration - will be set by environment variables
  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver
  
  # JPA Configuration
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: false
        
  # Kafka Configuration
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      # AWS MSK specific configurations
      properties:
        security.protocol: PLAINTEXT
        retries: 3
        acks: all
    consumer:
      group-id: product-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.ecommerce.product.kafka
        security.protocol: PLAINTEXT

# Server Configuration
server:
  port: 8080
  servlet:
    context-path: /

# Actuator Configuration for AWS health checks
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true

# Logging Configuration
logging:
  level:
    root: INFO
    com.ecommerce: INFO
    org.springframework.kafka: INFO
    org.apache.kafka: WARN

# AWS specific configuration
cloud:
  aws:
    region:
      auto: true
      static: ${AWS_REGION:us-east-1}
    stack:
      auto: false
