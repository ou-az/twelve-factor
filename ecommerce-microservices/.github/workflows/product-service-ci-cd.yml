name: Product Service CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'ecommerce-microservices/product-service/**'
      - '.github/workflows/product-service-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'ecommerce-microservices/product-service/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: product_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      kafka:
        image: confluentinc/cp-kafka:7.3.0
        env:
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
          KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        ports:
          - 9092:9092
        options: >-
          --health-cmd "kafka-topics --bootstrap-server localhost:9092 --list"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Maven Build and Test
        run: |
          cd ecommerce-microservices/product-service
          mvn clean verify -B
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: ecommerce-microservices/product-service/target/surefire-reports
      
      - name: SonarQube Analysis
        if: github.event_name != 'pull_request'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          cd ecommerce-microservices/product-service
          mvn sonar:sonar \
            -Dsonar.host.url=https://sonarqube.example.com \
            -Dsonar.projectKey=ecommerce-product-service \
            -Dsonar.login=$SONAR_TOKEN
  
  build-and-push:
    name: Build and Push Docker Image
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Build application
        run: |
          cd ecommerce-microservices/product-service
          mvn clean package -DskipTests
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Determine environment and tag
        id: env-tag
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENV="prod"
            TAG="release-$(date +%Y%m%d%H%M%S)"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            ENV="dev"
            TAG="dev-$(date +%Y%m%d%H%M%S)"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            ENV="${{ github.event.inputs.environment }}"
            TAG="${{ github.event.inputs.environment }}-$(date +%Y%m%d%H%M%S)"
          else
            ENV="dev"
            TAG="dev-$(date +%Y%m%d%H%M%S)"
          fi
          echo "::set-output name=env::${ENV}"
          echo "::set-output name=tag::${TAG}"
          echo "::set-output name=image::${{ steps.login-ecr.outputs.registry }}/ecommerce-product-service"
      
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecommerce-product-service
          IMAGE_TAG: ${{ steps.env-tag.outputs.tag }}
        run: |
          cd ecommerce-microservices/product-service
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      
      - name: Save image info for deployment
        id: image-info
        run: |
          echo "::set-output name=image_uri::${{ steps.env-tag.outputs.image }}:${{ steps.env-tag.outputs.tag }}"
    
    outputs:
      environment: ${{ steps.env-tag.outputs.env }}
      image_uri: ${{ steps.image-info.outputs.image_uri }}
  
  deploy-to-ecs:
    name: Deploy to ECS
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: ${{ needs.build-and-push.outputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6
      
      - name: Terraform Init
        run: |
          cd ecommerce-microservices/terraform/environments/${{ needs.build-and-push.outputs.environment }}
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=ecommerce/${{ needs.build-and-push.outputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ secrets.AWS_REGION }}"
      
      - name: Terraform Plan
        run: |
          cd ecommerce-microservices/terraform/environments/${{ needs.build-and-push.outputs.environment }}
          terraform plan \
            -var="db_password=${{ secrets.DB_PASSWORD }}" \
            -var="aws_region=${{ secrets.AWS_REGION }}" \
            -var="product_image=${{ needs.build-and-push.outputs.image_uri }}" \
            -out=tfplan
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
        run: |
          cd ecommerce-microservices/terraform/environments/${{ needs.build-and-push.outputs.environment }}
          terraform apply -auto-approve tfplan
      
      - name: Update ECS Service
        run: |
          aws ecs update-service \
            --cluster ${{ needs.build-and-push.outputs.environment }}-ecommerce-cluster \
            --service product-service \
            --force-new-deployment
      
      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster ${{ needs.build-and-push.outputs.environment }}-ecommerce-cluster \
            --services product-service
  
  integration-tests:
    name: Run Integration Tests
    needs: [build-and-push, deploy-to-ecs]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Run Integration Tests
        env:
          API_BASE_URL: https://api-${{ needs.build-and-push.outputs.environment }}.example.com
        run: |
          cd ecommerce-microservices/integration-tests
          mvn clean verify -Dapi.base.url=$API_BASE_URL
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: integration-test-results
          path: ecommerce-microservices/integration-tests/target/failsafe-reports
  
  notify:
    name: Send Notifications
    needs: [build-and-push, deploy-to-ecs, integration-tests]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Notify on Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
