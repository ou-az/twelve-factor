spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/product_db
    # The container name is 'product-db' in the Docker network
    username: postgres
    password: postgres
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
  kafka:
    # Set to false to disable Kafka for the postgres profile
    enabled: false
    bootstrap-servers: localhost:29092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 10
      compression-type: snappy
    consumer:
      group-id: product-service-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.ecommerce.product.kafka.event,com.ecommerce.product.event
    # Empty the spring.kafka.topics section as we're using kafka.topics

# Kafka topics configuration to match KafkaConfig class expectations
kafka:
  topics:
    product-created: product-created
    product-updated: product-updated
    product-deleted: product-deleted
    inventory-updated: inventory-updated
    product-events: product-events
    product-analytics: product-analytics

server:
  port: 8081

logging:
  level:
    com.ecommerce.product: DEBUG
    org.springframework: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE

# Application feature configuration for enhanced streaming capabilities
application:
  features:
    simulator:
      enabled: true
      rate: 5000
      batch-size: 3
    analytics:
      realTimeEnabled: true
      bufferSize: 100
      flushIntervalMs: 5000

# Enable Micrometer metrics for Kafka monitoring
management:
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
        kafka.producer.message.latency: true
